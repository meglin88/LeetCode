from collections import defaultdict, OrderedDict

class LFUCache:

    def __init__(self, capacity):
        self.capacity = capacity
        self.min_freq = 0
        self.key_to_value_freq = {}
        self.freq_to_keys = defaultdict(OrderedDict)

    def _update_freq(self, key):
        value, freq = self.key_to_value_freq[key]
        del self.freq_to_keys[freq][key]
        if not self.freq_to_keys[freq]:
            del self.freq_to_keys[freq]
            if self.min_freq == freq:
                self.min_freq += 1
        new_freq = freq + 1
        self.freq_to_keys[new_freq][key] = None
        self.key_to_value_freq[key] = (value, new_freq)

    def get(self, key):
        if key not in self.key_to_value_freq:
            return -1
        self._update_freq(key)
        return self.key_to_value_freq[key][0]

    def put(self, key, value):
        if self.capacity == 0:
            return
        if key in self.key_to_value_freq:
            self.key_to_value_freq[key] = (value, self.key_to_value_freq[key][1])
            self._update_freq(key)
        else:
            if len(self.key_to_value_freq) >= self.capacity:
                lfu_key, _ = self.freq_to_keys[self.min_freq].popitem(last=False)
                del self.key_to_value_freq[lfu_key]
            self.key_to_value_freq[key] = (value, 1)
            self.freq_to_keys[1][key] = None
            self.min_freq = 1
